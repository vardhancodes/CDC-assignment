import java.util.Arrays;

public class TripletSum {
    public static void main(String[] args) {
        int[] arr = {1, 4, 45, 6, 10, 8};
        int target = 22;

        boolean found = hasTripletSum(arr, target);
        System.out.println("Triplet exists: " + found);
    }

    public static boolean hasTripletSum(int[] arr, int target) {
        int n = arr.length;

        // Step 1: Sort the array to apply the two-pointer technique
        Arrays.sort(arr);

        // Step 2: Loop through each element, fixing one number at a time
        for (int i = 0; i < n - 2; i++) {

            // Start one pointer just after the current fixed element
            int left = i + 1;

            // Start another pointer from the end of the array
            int right = n - 1;

            // Keep checking while left pointer is before the right
            while (left < right) {

                // Calculate the sum of the current triplet
                int currentSum = arr[i] + arr[left] + arr[right];

                // If the sum matches the target, we found our triplet
                if (currentSum == target) {
                    System.out.println("Triplet: " + arr[i] + ", " + arr[left] + ", " + arr[right]);
                    return true; // No need to search further
                }

                // If the sum is less than the target, move the left pointer forward to increase the sum
                else if (currentSum < target) {
                    left++;
                }

                // If the sum is more than the target, move the right pointer backward to decrease the sum
                else {
                    right--;
                }
            }
        }

        // If we exit the loop without returning, no triplet was found
        return false;
    }
}
