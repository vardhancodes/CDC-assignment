class Solution {
    public int findPeakElement(int[] nums) {
        
        int start = 0;
        int size = nums.length;
        int end = size - 1;

        // If there's only one element, it's obviously a peak
        if (size == 1) {
            return 0;
        }

        // If array has only two elements, return the bigger one
        if (size < 3) {
            if (nums[end] > nums[start]) {
                return end;
            } else {
                return 0;
            }
        }

        // Binary search for peak
        while (start <= end) {
            int mid = start + (end - start) / 2;

            // If mid is first element and it's greater than its next → it's a peak
            if (mid == 0 && nums[mid] > nums[mid + 1]) {
                return mid;
            }

            // If mid is last element and it's greater than its previous → it's a peak
            if (mid == size - 1 && nums[mid] > nums[mid - 1]) {
                return mid;
            }

            // If mid is greater than both neighbors → it's a peak
            if (nums[mid] > nums[mid + 1] && nums[mid] > nums[mid - 1]) {
                return mid;
            }

            // If right neighbor is greater, then peak must be on the right side
            else if (mid != size - 1 && nums[mid] < nums[mid + 1]) {
                start = mid + 1;
            }

            // Else peak lies on the left side
            else {
                end = mid - 1;
            }
        }

        // Default return (this line won't be hit for valid inputs)
        return 0;
    }
}
